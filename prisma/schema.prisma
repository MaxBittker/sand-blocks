generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "mysql"
    url      = env("PLANETSCALE_PRISMA_DATABASE_URL")

    referentialIntegrity = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @db.Timestamp(6)
    metadata  String   @db.MediumText

    codeHash   String    @default("")
    code       String    @db.MediumText
    public     Boolean   @default(false)
    featured   Boolean   @default(false)
    featuredAt DateTime? @db.Timestamp(6)

    title String? @db.VarChar(511)

    parentId Int?
    parent   Post?  @relation("PostTree", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    children Post[] @relation("PostTree")

    userId String?
    user   User?   @relation(fields: [userId], references: [id])

    stars Star[]
    views Int    @default(1)

    @@index([userId])
    @@index([parentId])
    @@index([codeHash])
    @@index([createdAt])
}

model Star {
    postId Int
    post   Post @relation(fields: [postId], references: [id])

    userId String
    User   User   @relation(fields: [userId], references: [id])

    @@unique([postId, userId])
}

// NextAuth:
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    role          String?   @default("user")
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Post          Post[]
    Star          Star[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
